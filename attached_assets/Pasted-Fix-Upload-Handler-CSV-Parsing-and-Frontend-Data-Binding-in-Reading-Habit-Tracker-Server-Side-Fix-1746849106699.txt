Fix Upload Handler, CSV Parsing, and Frontend Data Binding in Reading Habit Tracker

Server-Side Fixes
Improve CSV Upload Parsing (server.js): Use multer properly and parse the uploaded CSV with Day.js. Filter only “read” books and convert fields to the correct types. Dates (like '2025/04/22' or '04/22/2025') are parsed with multiple formats for reliability. Also ensure numeric fields are numbers.
diff
Copy
 // Configure multer for file uploads (storage already set up above) 
 const uploadSingle = multer({ storage }).single('file');
 
 // API endpoint for uploading Goodreads CSV
 app.post('/api/upload', (req, res) => {
   uploadSingle(req, res, async (multerErr) => {
     try {
       if (multerErr) {
         console.error('Multer error:', multerErr);
         return res.status(400).json({ error: 'File upload failed. ' + multerErr.message });
       }
       if (!req.file) return res.status(400).json({ error: 'No file uploaded' });
       if (!req.file.path || !fs.existsSync(req.file.path)) {
         console.error('File not saved:', req.file);
         return res.status(400).json({ error: 'Upload failed – file not saved' });
       }
 
       try {
-        const books = await parseGoodreadsCsv(req.file.path);
+        const books = await parseGoodreadsCsv(req.file.path);
         if (!Array.isArray(books)) {
           throw new Error('Failed to parse books data');
         }
@@
 // CSV parser function
 const csvParser = require('csv-parser');
 const parseGoodreadsCsv = (filePath) =>
   new Promise((resolve, reject) => {
     const books = [];
     fs.createReadStream(filePath)
       .on('error', (e) => reject(new Error('File read failed: ' + e.message)))
       .pipe(csvParser())
       .on('data', (row) => {
-        if (row['Exclusive Shelf']?.trim() === 'read') books.push(row);
+        if (row['Exclusive Shelf']?.trim().toLowerCase() === 'read') {
+          // Parse and normalize fields
+          const title = row['Title']?.trim() || '(Untitled)';
+          const author = row['Author']?.trim() || 'Unknown';
+          const myRating = parseInt(row['My Rating'] || '', 10) || 0;
+          const pages = parseInt(row['Number of Pages'] || '', 10) || 0;
+          // Parse date using multiple possible formats
+          let dateRead = null;
+          if (row['Date Read']) {
+            const dateStr = row['Date Read'].trim();
+            if (dateStr) {
+              const parsed = dayjs(dateStr, ['YYYY/MM/DD', 'MM/DD/YYYY', 'DD/MM/YYYY', 'YYYY-MM-DD'], true);
+              if (parsed.isValid()) {
+                dateRead = parsed.toDate();
+              }
+            }
+          }
+          books.push({ title, author, pages, myRating, dateRead });
+        }
       })
       .on('error', (e) => reject(new Error('CSV parse failed: ' + e.message)))
       .on('end', () => resolve(books));
   });
Fix Statistics Calculation (generateStats in server.js): Ensure accurate computation of stats and remove duplicate or conflicting code. We calculate total books/pages, average rating (avoid NaN if no ratings), books per year/month, top authors, rating distribution, and page stats (including longest and shortest book with authors). The readingByMonth is structured as an array of 12 months for each year present, matching the frontend’s expectations.
diff
Copy
 function generateStats(books) {
   if (!books || books.length === 0) {
-    return {
-      totalBooks: 0,
-      totalPages: 0,
-      averageRating: 0,
-      readingByYear: {},
-      readingByMonth: {},
-      readingByGenre: {},
-      topAuthors: [],
-      ratingDistribution: {1:0, 2:0, 3:0, 4:0, 5:0},
-      readingPace: { booksPerYear: 0, booksPerMonth: 0, pagesPerDay: 0 },
-      pageStats: { averageLength: 0, longestBook: { title: '', pages: 0 } }
-    };
+    return {
+      totalBooks: 0,
+      totalPages: 0,
+      averageRating: 0,
+      readingByYear: {},
+      readingByMonth: {},
+      readingByGenre: {},
+      topAuthors: [],
+      ratingDistribution: {1: 0, 2: 0, 3: 0, 4: 0, 5: 0},
+      readingPace: { booksPerYear: 0, booksPerMonth: 0, pagesPerDay: 0 },
+      pageStats: {
+        totalPages: 0,
+        averageLength: 0,
+        longestBook: { title: '', author: '', pages: 0 },
+        shortestBook: { title: '', author: '', pages: 0 }
+      }
+    };
   }
-  const totalBooks = books.length;
-  const totalPages = books.reduce((sum, book) => sum + (book.pages || 0), 0);
-  
-  // Calculate average rating
-  const ratedBooks = books.filter(b => b.myRating && b.myRating > 0);
-  const averageRating = ratedBooks.length 
-    ? parseFloat((ratedBooks.reduce((sum, b) => sum + b.myRating, 0) / ratedBooks.length).toFixed(2))
-    : 0;
- 
-  // Reading by year and month
-  const readingByYear = {};
-  const readingByMonth = {};
-  books.forEach(book => {
-    if (book.dateRead) {
-      const year = book.dateRead.getFullYear();
-      const month = book.dateRead.getMonth();
-      readingByYear[year] = (readingByYear[year] || 0) + 1;
-      const ym = `${year}-${month}`;
-      readingByMonth[ym] = (readingByMonth[ym] || 0) + 1;
-    }
-  });
+  const totalBooks = books.length;
+  const totalPages = books.reduce((sum, book) => sum + (book.pages || 0), 0);
+  // Average rating (only include books with a rating > 0)
+  const ratedBooks = books.filter(b => b.myRating && b.myRating > 0);
+  const averageRating = ratedBooks.length
+    ? parseFloat((ratedBooks.reduce((sum, b) => sum + b.myRating, 0) / ratedBooks.length).toFixed(2))
+    : 0;
+  // Books read by year
+  const readingByYear = {};
+  books.forEach(book => {
+    if (book.dateRead) {
+      const year = book.dateRead.getFullYear();
+      readingByYear[year] = (readingByYear[year] || 0) + 1;
+    }
+  });
+  // Books read by month for each year (12 months array per year)
+  const readingByMonth = {};
+  // Initialize an array for each year present in readingByYear
+  Object.keys(readingByYear).forEach(year => {
+    readingByMonth[year] = Array(12).fill(0);
+  });
+  // Ensure current and previous year keys exist, even if no books (for frontend charts)
+  const currYear = new Date().getFullYear();
+  const prevYear = currYear - 1;
+  if (!readingByMonth[currYear]) readingByMonth[currYear] = Array(12).fill(0);
+  if (!readingByMonth[prevYear]) readingByMonth[prevYear] = Array(12).fill(0);
+  // Populate monthly counts
+  books.forEach(book => {
+    if (book.dateRead) {
+      const y = book.dateRead.getFullYear();
+      const m = book.dateRead.getMonth(); // 0-11
+      if (!readingByMonth[y]) readingByMonth[y] = Array(12).fill(0);
+      readingByMonth[y][m] += 1;
+    }
+  });
 
-  // Find longest book
-  let longestBook = { title: '', pages: 0 };
-  books.forEach(b => {
-    if ((b.pages || 0) > (longestBook.pages || 0)) {
-      longestBook = { title: b.title || '(Unknown)', pages: b.pages || 0 };
-    }
-  });
+  // Identify longest and shortest books
+  let longestBook = { title: '', author: '', pages: 0 };
+  let shortestBook = { title: '', author: '', pages: Infinity };
+  books.forEach(b => {
+    const p = b.pages || 0;
+    if (p > (longestBook.pages || 0)) {
+      longestBook = { title: b.title || '(Unknown)', author: b.author || '(Unknown)', pages: p };
+    }
+    if (p > 0 && p < shortestBook.pages) {
+      shortestBook = { title: b.title || '(Unknown)', author: b.author || '(Unknown)', pages: p };
+    }
+  });
+  if (shortestBook.pages === Infinity) {
+    // If no book has pages > 0, set shortest to default
+    shortestBook = { title: '', author: '', pages: 0 };
+  }
 
-  // Calculate reading pace
-  const readingPace = {
-    booksPerYear: totalBooks,
-    booksPerMonth: parseFloat((totalBooks / 12).toFixed(2)),
-    pagesPerDay: parseFloat((totalPages / 365).toFixed(2))
-  };
+  // Reading pace statistics
+  const booksPerMonth = parseFloat((totalBooks / 12).toFixed(2));
+  const pagesPerDay = totalPages ? parseFloat((totalPages / 365).toFixed(2)) : 0;
+  // Average books per year (if data spans multiple years)
+  const yearsCount = Object.keys(readingByYear).length;
+  const booksPerYear = yearsCount ? parseFloat((totalBooks / yearsCount).toFixed(2)) : totalBooks;
+  const readingPace = { booksPerYear, booksPerMonth, pagesPerDay };
 
-  // Top authors
-  const authorCounts = {};
-  books.forEach(book => {
-    if (book.author) {
-      authorCounts[book.author] = (authorCounts[book.author] || 0) + 1;
-    }
-  });
-  const topAuthors = Object.entries(authorCounts)
-    .sort((a, b) => b[1] - a[1])
-    .slice(0, 10)
-    .map(([author, count]) => ({ author, count }));
+  // Top 10 authors by count
+  const authorCounts = {};
+  books.forEach(book => {
+    if (book.author) {
+      authorCounts[book.author] = (authorCounts[book.author] || 0) + 1;
+    }
+  });
+  const topAuthors = Object.entries(authorCounts)
+    .sort((a, b) => b[1] - a[1])
+    .slice(0, 10)
+    .map(([author, count]) => ({ author, count }));
 
-  // Rating distribution
-  const ratingDistribution = {1:0, 2:0, 3:0, 4:0, 5:0};
-  books.forEach(book => {
-    if (book.myRating > 0) {
-      ratingDistribution[book.myRating] = (ratingDistribution[book.myRating] || 0) + 1;
-    }
-  });
+  // Rating distribution (counts of ratings 1–5)
+  const ratingDistribution = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0};
+  books.forEach(book => {
+    const r = book.myRating;
+    if (r && r > 0 && ratingDistribution[r] !== undefined) {
+      ratingDistribution[r] += 1;
+    }
+  });
 
-  // Calculate average rating
-  const ratingsSum = books.reduce((sum, book) => sum + (book.myRating || 0), 0);
-  const averageRating = ratingsSum / books.filter(book => book.myRating > 0).length;
- 
-  // Reading history by year
-  const readingByYear = {};
-  books.forEach(book => {
-    if (book.dateRead) {
-      const year = book.dateRead.getFullYear();
-      readingByYear[year] = (readingByYear[year] || 0) + 1;
-    }
-  });
- 
-  // Reading history by month (for the current and previous year)
-  const currentYear = new Date().getFullYear();
-  const readingByMonth = {};
- 
-  // Initialize all months for current and previous year
-  [currentYear, currentYear - 1].forEach(year => {
-    readingByMonth[year] = Array(12).fill(0);
-  });
- 
-  // Count books by month
-  books.forEach(book => {
-    if (book.dateRead) {
-      const year = book.dateRead.getFullYear();
-      const month = book.dateRead.getMonth();
- 
-      if (year === currentYear || year === currentYear - 1) {
-        readingByMonth[year][month] += 1;
-      }
-    }
-  });
- 
-  // Top authors
-  const authorCounts = {};
-  books.forEach(book => {
-    if (book.author) {
-      authorCounts[book.author] = (authorCounts[book.author] || 0) + 1;
-    }
-  });
- 
-  const topAuthors = Object.entries(authorCounts)
-    .sort((a, b) => b[1] - a[1])
-    .slice(0, 10)
-    .map(([author, count]) => ({ author, count }));
- 
-  // Rating distribution
-  const ratingDistribution = {};
-  for (let i = 1; i <= 5; i++) {
-    ratingDistribution[i] = books.filter(book => book.myRating === i).length;
-  }
- 
-  // Calculate reading pace
-  const readingPace = {
-    currentYear: readingByYear[currentYear] || 0,
-    previousYear: readingByYear[currentYear - 1] || 0,
-    currentMonth: readingByMonth[currentYear][new Date().getMonth()] || 0,
-    averageBooksPerMonth: calculateAverageBooksPerMonth(books)
-  };
- 
-  // Recently read books
-  const recentBooks = books.slice(0, 30);
- 
-  // Goal progress (assuming a goal of 52 books per year)
-  const yearlyGoal = 52;
-  const goalProgress = {
-    target: yearlyGoal,
-    current: readingByYear[currentYear] || 0,
-    percentage: Math.round(((readingByYear[currentYear] || 0) / yearlyGoal) * 100)
-  };
- 
-  return {
-    totalBooks,
-    averageRating,
-    totalPages,
-    averagePagesPerBook: Math.round(totalPages / totalBooks),
-    readingByYear,
-    readingByMonth,
-    topAuthors,
-    ratingDistribution,
-    readingPace,
-    recentBooks,
-    goalProgress
-  };
+  // Page statistics (total pages, average length, longest/shortest book)
+  const averageLength = totalBooks ? parseFloat((totalPages / totalBooks).toFixed(2)) : 0;
+  const pageStats = { totalPages, averageLength, longestBook, shortestBook };
+  // Return compiled stats object
+  return {
+    totalBooks,
+    totalPages,
+    averageRating,
+    readingByYear,
+    readingByMonth,
+    readingByGenre: {},       // genre data not available from CSV, keep empty
+    topAuthors,
+    ratingDistribution,
+    readingPace,
+    pageStats
+  };
 }
Front-End Fixes
Handle Upload Response in Frontend (FileUpload.js): Adjust the upload handler to use the new response structure. The server now returns { books, stats } under data. We pass these directly to the context’s processor (as books and stats), not incorrectly as readingData. This ensures the context stores the books array and stats object properly, then calculates goal progress and saves to local storage.
diff
Copy
 // In FileUpload.js, after successful upload response:
-      if (response.data?.data) {
-        const { books, stats } = response.data.data;
-        await processReadingData({ readingData: books || [], stats: stats || {} });
-        navigate('/');
-      } else {
-        throw new Error('Invalid response format from server');
-      }
+      if (response.data?.data) {
+        const { books, stats } = response.data.data;
+        // Process and store the received books and stats
+        await processReadingData({ books: books || [], stats: stats || {} });
+        navigate('/');
+      } else {
+        throw new Error('Invalid response format from server');
+      }
Ensure Stats Are Used Safely in UI: The stats context now includes all necessary fields (e.g. stats.pageStats.longestBook.author and stats.pageStats.shortestBook). Components already guard against missing data, but we add a few fallbacks to be safe:
In any component using stats.readingByMonth or stats.readingByYear, ensure those exist before accessing (most pages already do this with stats.readingByMonth = stats.readingByMonth || {} etc.).
For example, in Dashboard and MonthlyProgress, the code now initializes empty arrays or objects for missing years/months so that .map and indexing don’t fail. In ReadingStats, we check that stats.pageStats.longestBook and shortestBook exist before rendering them (already handled with optional chaining in JSX).
diff
Copy
// Example in Dashboard.js (ensure readingPace and pageStats defaults):
-  stats.readingPace = stats.readingPace || {};
-  stats.readingPace.booksPerMonth = stats.readingPace.booksPerMonth || 0;
-  stats.readingPace.booksPerYear = stats.readingPace.booksPerYear || 0;
-  stats.readingPace.pagesPerDay = stats.readingPace.pagesPerDay || 0;
+  stats.readingPace = stats.readingPace || {};
+  stats.readingPace.booksPerMonth = stats.readingPace.booksPerMonth || 0;
+  stats.readingPace.booksPerYear = stats.readingPace.booksPerYear || 0;
+  stats.readingPace.pagesPerDay = stats.readingPace.pagesPerDay || 0;
   stats.pageStats = stats.pageStats || {};
-  stats.pageStats.averageLength = stats.pageStats.averageLength || 0;
-  stats.pageStats.longestBook = stats.pageStats.longestBook || { title: 'None', pages: 0 };
+  stats.pageStats.averageLength = stats.pageStats.averageLength || 0;
+  stats.pageStats.longestBook = stats.pageStats.longestBook || { title: 'None', author: 'N/A', pages: 0 };
+  stats.pageStats.shortestBook = stats.pageStats.shortestBook || { title: 'None', author: 'N/A', pages: 0 };
   stats.readingByGenre = stats.readingByGenre || {};
   stats.topAuthors = stats.topAuthors || [];
With these fixes, CSV uploads should succeed without the “500” error, the frontend will correctly store and use the returned books and stats, and all dashboard and stats pages will display the proper statistics (books per year/month, average rating, top authors, total pages, longest/shortest book, etc.) with no undefined or NaN values.