Copy everything inside the single fenced block below and paste it into Replit’s Ask AI / Ghostwriter.
It contains all steps in one prompt; Ghostwriter will apply every change in one go.

md
Copy
Edit
### 🛠️ Replit AI Task — Final, Bullet-Proof Fix for `/api/upload` 500 Errors

**Objectives**
1. `/api/upload` never returns HTTP 500.  
2. `uploads/` (and per-user sub-dirs) are created automatically.  
3. Any failure (Multer, FS, bad CSV, stats) → **400** `{ error: "<friendly msg>" }`.  
4. Success returns `{ books, stats }` for guests **and** logged-in users.  
5. Front-end shows the exact error text from server.

---

#### 1 · Add helper + import at top of `server.js`

```js
const csvParser = require('csv-parser');               // NEW
const parseGoodreadsCsv = (filePath) =>
  new Promise((resolve, reject) => {
    const books = [];
    fs.createReadStream(filePath)
      .on('error', (e) => reject(new Error('File read failed: ' + e.message)))
      .pipe(csvParser())
      .on('data', (row) => {
        if (row['Exclusive Shelf']?.trim() === 'read') books.push(row);
      })
      .on('error', (e) => reject(new Error('CSV parse failed: ' + e.message)))
      .on('end', () => resolve(books));
  });
2 · Harden Multer storage (still in server.js)
js
Copy
Edit
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const baseDir = path.join(__dirname, 'uploads');
    const dest = req.session?.userEmail
      ? path.join(baseDir, req.session.userEmail)
      : path.join(baseDir, 'guest');
    fs.mkdir(dest, { recursive: true }, (err) => {
      if (err) {
        console.error('Upload dir error:', err);
        return cb(new Error('Upload directory error'));
      }
      cb(null, dest);
    });
  },
  filename: (req, file, cb) => {
    const ts = Date.now();
    cb(null, `goodreads-${ts}${path.extname(file.originalname)}`);
  }
});
3 · Replace entire /api/upload route
js
Copy
Edit
const uploadSingle = multer({ storage }).single('file');

app.post('/api/upload', (req, res) => {
  uploadSingle(req, res, async (multerErr) => {
    if (multerErr) {
      console.error('Multer error:', multerErr);
      return res.status(400).json({ error: 'File upload failed. ' + multerErr.message });
    }
    if (!req.file) return res.status(400).json({ error: 'No file uploaded' });
    if (!req.file.path || !fs.existsSync(req.file.path)) {
      console.error('File not saved:', req.file);
      return res.status(400).json({ error: 'Upload failed – file not saved' });
    }

    try {
      const books = await parseGoodreadsCsv(req.file.path);
      const stats = generateStats(books);     // keep existing util

      if (req.session?.userId) {
        await User.updateOne(
          { _id: req.session.userId },
          { $set: { 'readingData.books': books, 'readingData.stats': stats } }
        );
      }
      return res.json({ books, stats });
    } catch (err) {
      console.error('Processing error:', err);
      return res.status(400).json({
        error:
          err.message?.startsWith('CSV parse') || err.message?.startsWith('File read')
            ? 'Invalid CSV format. Please upload a valid Goodreads export.'
            : err.message || 'Failed to process file'
      });
    }
  });
});
4 · (Optional) global fallback middleware
js
Copy
Edit
app.use((err, req, res, next) => {
  console.error('Unhandled exception:', err);
  res.status(400).json({ error: 'Unexpected error', detail: err.message });
});
5 · Show server message in front-end
*File *: client/src/components/FileUpload.js

js
Copy
Edit
catch (err) {
  const msg = err.response?.data?.error || 'Upload failed. Please try again.';
  setError(msg);
}
