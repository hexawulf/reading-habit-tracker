# Reading Habit Tracker – Comprehensive Fix Instructions

Paste this ENTIRE prompt (including the triple‑backticks) into **Replit AI / Ghostwriter**.  
It patches every outstanding issue in one go.

```md
### 🛠️ Replit AI Task — Fix Upload, CSV Parsing, and Stats Flow (ALL‑IN‑ONE)

We have fatal and logic bugs in **server.js**, **utils/goodreadsParser.js**, and the React client.  
Apply EVERY change below in one commit.

---

## 1  Eliminate duplicate variables & align stats shape  (`server.js`)

1. **Inside `generateStats(books)`**  
   - Remove the *second* declaration block that re‑maps `averageRating`, `readingByYear`, `readingByMonth`, `ratingDistribution`, `readingPace`, etc.  
   - Keep only **one** calculation block (the first).  
   - Return stats with this exact shape so the frontend works:

```js
return {
  totalBooks,
  totalPages,
  averageRating,               // Number (0‑5, 2 decimals)
  readingByYear,               // { 2023: 12, 2024: 8, … }
  readingByMonth,              // { 2024: [1,0,3,2,…] }
  readingByGenre: {},
  topAuthors,                  // [{ author, count }]
  ratingDistribution,          // {1:0,2:3,…,5:n}
  readingPace,                 // { booksPerYear, booksPerMonth, pagesPerDay }
  pageStats: {
    totalPages,
    averageLength,             // avg pages/book
    longestBook,               // { title, author, pages }
    shortestBook               // { title, author, pages }
  }
};
```

2. **Same function** – delete the later duplicate  

```js
// remove or rename this duplicate
const averageRating = ratingsSum / books.filter(b => b.myRating>0).length;
```

---

## 2  Robust typed CSV parser  (`server.js`)

### a) Replace existing `parseGoodreadsCsv`

```js
const csvParser = require('csv-parser');
const dayjs = require('dayjs');
const customParse = require('dayjs/plugin/customParseFormat');
dayjs.extend(customParse);

const parseDate = (s)=>{ if(!s||!s.trim())return null;
  const d=dayjs(s.trim(),['YYYY/MM/DD','MM/DD/YYYY','DD/MM/YYYY','YYYY-MM-DD'],true);
  return d.isValid()?d.toDate():null; };

const parseGoodreadsCsv = (filePath)=>
 new Promise((res,rej)=>{
  const books=[];
  fs.createReadStream(filePath)
   .on('error',e=>rej(new Error('File read failed: '+e.message)))
   .pipe(csvParser())
   .on('data',row=>{
     if((row['Exclusive Shelf']||'').trim().toLowerCase()!=='read')return;
     books.push({
       title: row['Title']?.trim()||'(Untitled)',
       author: row['Author']?.trim()||'Unknown',
       myRating: parseInt(row['My Rating']||'0',10)||0,
       pages: parseInt(row['Number of Pages']||'0',10)||0,
       dateRead: parseDate(row['Date Read'])
     });
   })
   .on('error',e=>rej(new Error('CSV parse failed: '+e.message)))
   .on('end',()=>res(books));
});
```

### b) Fix name mismatch in `/api/stats`

```diff
-const results = await parseGoodreadsCSV(fullPath);
+const results = await parseGoodreadsCsv(fullPath);
```

---

## 3  Always cleanup file on parse error  (`/api/upload` handler)

```diff
try {
  const books = await parseGoodreadsCsv(req.file.path);
  const stats = generateStats(books);
  return res.json({ data: { books, stats } });
} catch (err) {
+ await cleanupFile(req.file.path);   // NEW
  console.error('CSV error:', err);
  return res.status(400).json({ error: err.message });
}
```

---

## 4  Frontend response shape  (`FileUpload.js` & Context)

### FileUpload.js

```diff
-const { books, stats } = response.data.data;
-processReadingData({ readingData: books, stats });
+const { books, stats } = response.data.data;
+processReadingData({ books, stats });
```

### ReadingDataContext.js (`processReadingData`)

```diff
-if (Array.isArray(data)) { … }
+if (data && data.books && data.stats) {
+  setReadingData(data.books);
+  setStats(data.stats);
+  const gp = calculateGoalProgress(data.books);
+  setGoalProgress(gp);
+  storageService.saveData({ readingData: data.books,
+                            stats: data.stats,
+                            goalProgress: gp });
+  return;
+}
```

---

## 5  Restart & test

```bash
npm run dev
```

1. Upload Goodreads CSV → 200 { data: { books, stats } }  
2. Dashboard stats populate correctly  
3. Failed upload cleans up temp file

---

#### Commit

```bash
git add server.js client/src/components/FileUpload.js         client/src/context/ReadingDataContext.js
git commit -m "fix: CSV parser, stats calc, dup vars, cleanup, frontend data flow"
git push
```

```
---

### How to use
1. Open **Replit → Ask AI**  
2. Paste **this entire block** (including triple‑backticks)  
3. Press **Enter** – Ghostwriter will apply the patches.  
4. Wait for rebuild ➜ test upload again.

```