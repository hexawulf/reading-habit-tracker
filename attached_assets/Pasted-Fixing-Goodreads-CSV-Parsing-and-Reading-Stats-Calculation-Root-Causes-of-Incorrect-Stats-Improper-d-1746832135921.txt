Fixing Goodreads CSV Parsing and Reading Stats Calculation
Root Causes of Incorrect Stats
Improper date parsing: The parseGoodreadsCsv function uses new Date() on the "Date Read" string without handling Goodreads’ date format variations
github.com
. For example, a date like "2025/04/22" or "31/12/2020" may not be parsed correctly as a JavaScript Date. This leads to dateRead being invalid (NaN) for many entries, so those books aren’t counted in yearly or monthly stats.
Excluding valid books: The parser only includes books if exclusiveShelf === 'read' and a Date Read is present
github.com
. This means any book marked as read but missing a date (or with an unrecognized date format) is dropped entirely from the results. Legitimately read books were being omitted from all statistics.
Aggregation logic errors: In generateStats, the average rating is calculated by dividing by the count of rated books without checking for zero
github.com
. If no book has a rating, this yields a division by zero (NaN), causing “Average Rating” to show as 0 or an incorrect value. Similarly, the calculateAverageBooksPerMonth helper divides total books by yearsWithReading * 12 without guarding against zero
github.com
, which can produce NaN if no dates were parsed. These errors make “Books per Month” and average ratings appear as 0 or nonsense values.
Data cleanup issues: The CSV’s text fields aren’t trimmed. For instance, an author name might include extra spaces (e.g. "Stephen King" in the sample file), causing the same author to be counted separately in stats. This isn’t the primary cause of zeroed stats, but it does skew the “Top Authors” count.
Steps to Fix the Issues
Use robust date parsing in parseGoodreadsCsv:
Open server.js and locate the parseGoodreadsCsv function (around line 624). Import the Day.js library at the top of the file for reliable date parsing:
js
Copy
Edit
const dayjs = require('dayjs');
const customParseFormat = require('dayjs/plugin/customParseFormat');
dayjs.extend(customParseFormat);
In the parseGoodreadsCsv function, replace the lines that set dateRead and dateAdded with code that tries multiple date formats. For example:
js
Copy
Edit
// Before (using new Date directly):contentReference[oaicite:4]{index=4}:
dateRead: data['Date Read'] ? new Date(data['Date Read']) : null,
dateAdded: data['Date Added'] ? new Date(data['Date Added']) : null,
js
Copy
Edit
// After: use dayjs to parse common Goodreads date formats
const dateStr = data['Date Read'] && data['Date Read'].trim();
dateRead: dateStr && dateStr !== '' 
  ? dayjs(dateStr, ['YYYY/MM/DD','MM/DD/YYYY','YYYY-MM-DD','DD/MM/YYYY']).toDate() 
  : null,
const addedStr = data['Date Added'] && data['Date Added'].trim();
dateAdded: addedStr && addedStr !== '' 
  ? dayjs(addedStr, ['YYYY/MM/DD','MM/DD/YYYY','YYYY-MM-DD','DD/MM/YYYY']).toDate() 
  : null,
This ensures that dates like YYYY/MM/DD or DD/MM/YYYY are correctly interpreted. If a date string doesn’t match any format, it will result in dateRead: null (instead of an invalid Date).
Include books with no "Date Read" in the results:
Still in the parseGoodreadsCsv function, remove the condition that filters out books lacking a date. Currently the code is:
js
Copy
Edit
if (transformedData.exclusiveShelf === 'read' && transformedData.dateRead) {
  books.push(transformedData);
}
Change it to push all read-shelf books regardless of date:
js
Copy
Edit
if (transformedData.exclusiveShelf === 'read') {
  books.push(transformedData);
}
By dropping the dateRead check
github.com
, any book on the “read” shelf will be included. Books with a null or unparseable date will still count toward totals, average ratings, etc. (They simply won’t contribute to year/month timelines, since the stats generation already skips null dates.) This fixes the undercount where “Books Read in 2025” was 0 even when the CSV had read books for 2025.
Fix average rating calculation to avoid division by zero:
In the generateStats function (also in server.js, around line 699), adjust how the average rating is computed. Ensure you only divide by the number of rated books when that count is > 0. For example:
js
Copy
Edit
// Before:contentReference[oaicite:6]{index=6}:
const ratingsSum = books.reduce((sum, book) => sum + (book.myRating || 0), 0);
const averageRating = ratingsSum / books.filter(book => book.myRating > 0).length;
js
Copy
Edit
// After: safeguard against zero count
const ratedBooks = books.filter(book => book.myRating > 0);
const ratingsSum = ratedBooks.reduce((sum, book) => sum + book.myRating, 0);
const averageRating = ratedBooks.length > 0 
  ? parseFloat((ratingsSum / ratedBooks.length).toFixed(2)) 
  : 0;
This way, if there are no rated books, averageRating will be 0 (instead of NaN/Infinity). If there are ratings, it calculates the correct average and rounds it to two decimals for clarity.
Handle “books per month” calculation safely:
Still in generateStats, find the helper that computes average books per month (the function calculateAverageBooksPerMonth inside generateStats). Modify it to avoid dividing by zero months. For example:
js
Copy
Edit
// Before (potentially dividing by 0):contentReference[oaicite:7]{index=7}:
const totalMonths = yearsWithReading.size * 12;
return parseFloat((books.length / totalMonths).toFixed(2));
js
Copy
Edit
// After: only divide if totalMonths > 0
const totalMonths = yearsWithReading.size * 12;
return totalMonths > 0 
  ? parseFloat((books.length / totalMonths).toFixed(2)) 
  : 0;
This ensures that if no dates were parsed (yearsWithReading is empty), the function returns 0 instead of NaN. With the earlier date parsing fixes, yearsWithReading should now correctly reflect the span of years you have data for, and “Books per Month” will be computed on that basis.
Trim whitespace for names and titles (optional but recommended):
In the parseGoodreadsCsv transformation, trim the text fields to clean up the data. For example:
js
Copy
Edit
title: data['Title'] ? data['Title'].trim() : '',
author: data['Author'] ? data['Author'].trim() : '',
Do this for Author l-f and other relevant fields if necessary. Trimming ensures that entries like "Stephen King" are normalized to "Stephen King", so the Top Authors stats aren’t split by stray spaces. This fix will make the author and title data consistent, though it doesn’t affect the zero-value bug directly.
Re-run the CSV import to verify:
After implementing the above changes, restart the app and upload the Goodreads CSV again. The statistics should now populate correctly. You should see accurate counts for “Books Read in 2025” (reflecting the actual number of books with Date Read in 2025), a sensible “Books per Month” value (and non-zero entries in the month-by-month chart for months you finished books), and the “Average Rating” should reflect your actual average of My Rating for read books (or 0 if you haven’t rated any). All previously missing or zeroed stats should update to match the CSV content.